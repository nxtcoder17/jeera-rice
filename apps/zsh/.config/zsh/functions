#! /usr/bin/env sh

# nvim() {
#  $HOME/builds/nvim.appimage "$@"
# }

pnpm() {
  if [ $1 = "peer" ]; then
    PKG=$2
    shift 1
    command pnpm i $(npm info "$PKG@latest" peerDependencies --json | sed 's/[\{\},]//g ; s/: /@/g' | xargs) $@
  else
    command pnpm $@
  fi
}


dc() {
  command=$1
  shift 1;
  case $command  in 
    "up")
      command docker compose up -d -t 0 --remove-orphans $@
      ;;
    "p"|"ps")
      command docker compose ps
      ;;
    "re"|"restart")
      svc=$(cat docker-compose.yml | yq '.services | keys| .[]' | tr -d '"' | fzf --prompt="restart service ğŸ‘‰ ")
      command docker compose restart -t 0 $svc
      ;;
    "start")
      svc=$(cat docker-compose.yml | yq '.services | keys| .[]' | tr -d '"' | fzf --prompt="service ğŸ‘‰ ")
      docker compose start -t 0 $svc
      ;;
    "stop")
      svc=$(cat docker-compose.yml | yq '.services | keys| .[]' | tr -d '"' | fzf --prompt="service ğŸ‘‰ ")
      docker compose stop -t 0 $svc
      ;;
    "l"|"logs")
      opt=$1
      svc=""
      [ $opt = "all" ] || svc=$(cat docker-compose.yml | yq '.services | keys| .[]' | tr -d '"' | fzf --prompt="for service ğŸ‘‰ ")
      command docker compose logs --tail=100 -f $svc $@
      ;;
    "e"|"exec")
      arg=$1
      shell=$SHELL
      [ -z "$arg" ] || shell=$arg
      svc=$(cat docker-compose.yml | yq '.services | keys| .[]' | tr -d '"' | fzf --prompt="into service ğŸ‘‰ ")
      command docker compose exec $svc $shell
      ;;
    "d"|"down")
      docker-compose down -t 0
      ;;
  esac
}

_fzf_complete_make() {
  _fzf_complete --multi --reverse --prompt="target> " -- "make ${@:2}" < <(grep -iE '^[^.#].*:\s+' ./Makefile | awk -F':' '{print $1}' | uniq)
}

_fzf_complete_prun() {
  _fzf_complete --multi --reverse --prompt="package.json script> " -- "pnpm run ${@:2}" < <(cat ./package.json | jq '.scripts' | grep -i '"' | awk '{print $1}' | sed 's/:$//g' | sed 's/"//g')
}

_fzf_complete_task() {
  _fzf_complete --multi --reverse --prompt="Taskfile task> " -- "task ${@:2}" < <(cat Taskfile.yml | yq -o json | jq -r '.tasks | keys |.[]| tostring' 
)
}

# _fzf_complete_sample() {
#   _fzf_complete --multi --reverse --prompt="target> " -- "$@" < <()
# }

to-base64() {
  cat $1 | base64 | tr -d '\n' | xclip -sel clip
}

from-base64() {
  cat $1 | base64 -d | xclip -sel clip
}

goinstall() {
  command env GOBIN=~/.local/bin/ go install $1
}
